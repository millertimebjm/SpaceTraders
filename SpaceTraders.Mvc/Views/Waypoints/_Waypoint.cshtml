@using SpaceTraders.Models;
@using SpaceTraders.Models.Enums
@using SpaceTraders.Mvc.Services
@using SpaceTraders.Services.Paths
@using SpaceTraders.Services.Systems
@using SpaceTraders.Services.Waypoints
@using SpaceTraders.Services.Waypoints.Interfaces
@model WaypointViewModel

@{
    var currentShip = await Model.CurrentShip;
    var currentWaypoint = await Model.CurrentWaypoint;
    var waypoint = await Model.Waypoint;
    var system = await Model.System;
}

<h6 style="margin-top:20px; margin-bottom: 0px;">Waypoint <a href="/waypoints/@waypoint.Symbol">@waypoint.Symbol</a> (<a href="/waypoints/@waypoint.Symbol/reset">reset</a>)</h6>
<ul>
    <li><b>System:</b> <a href="/systems/@WaypointsService.ExtractSystemFromWaypoint(waypoint.Symbol)">@WaypointsService.ExtractSystemFromWaypoint(waypoint.Symbol)</a></li>
    <li><b>Type: </b> @waypoint.Type</li>
    <li><b>X:</b> @waypoint.X</li>
    <li><b>Y:</b> @waypoint.Y</li>
    @if (waypoint.Traits?.Any() == true)
    {
        <li><b>Traits: </b> @string.Join(",", waypoint.Traits.Select(t => t.Name))</li>
    }
    @if (!string.IsNullOrWhiteSpace(waypoint.Orbits))
    {
        <li><b>Orbits:</b> @waypoint.Orbits</li>
    }
    @if (waypoint.Traits?.Any() == true 
        && waypoint.Traits.Select(t => t.Name.ToUpper()).ToList().Contains(WaypointTypesEnum.SHIPYARD.ToString()))
    {
        <li><a href="/systems/@WaypointsService.ExtractSystemFromWaypoint(waypoint.Symbol)/waypoints/@waypoint.Symbol/shipyard">Shipyard</a></li>
    }
    @if (currentShip is not null && currentWaypoint is not null)
    {
        var path = PathsService.BuildDijkstraPath(
            system.Waypoints, 
            currentWaypoint,
            currentShip.Fuel.Capacity,
            currentShip.Fuel.Current);
        if (path.Any(p => p.Key.Symbol == waypoint.Symbol) || currentShip.Nav.FlightMode == NavFlightModeEnum.DRIFT.ToString())
        {
            var waypointPath = path.SingleOrDefault(p => p.Key.Symbol == waypoint.Symbol).Value;
            if (waypointPath.Item1?.Count() == 1)
            {
                <li>Current waypoint.</li>
            }
            else if (waypointPath.Item1?.Count() == 2 || currentShip.Nav.FlightMode == NavFlightModeEnum.DRIFT.ToString())
            {
                <li>Path has direct route.</li>
                @if (currentShip.Nav.Status == NavStatusEnum.IN_ORBIT.ToString())
                {
                    <li><a href="/waypoints/@waypoint.Symbol/navigate">Navigate To (@Math.Ceiling(WaypointsService.CalculateDistance(currentWaypoint.X, currentWaypoint.Y, waypoint.X, waypoint.Y))/@currentShip.Fuel.Current)</a></li>
                } 
                else
                {
                    <li>Can't Navigate - not in orbit (@Math.Ceiling(WaypointsService.CalculateDistance(currentWaypoint.X, currentWaypoint.Y, waypoint.X, waypoint.Y))/@currentShip.Fuel.Current)</li>
                }
            }
            else
            {
                var nextHop = waypointPath.Item1[1];
                var nextHopFuel = @Math.Ceiling(WaypointsService.CalculateDistance(nextHop.X, nextHop.Y, currentWaypoint.X, currentWaypoint.Y));
                <li>Path has @(waypointPath.Item1.Count()-1) navigates</li>
                @if (currentShip.Nav.Status == NavStatusEnum.IN_ORBIT.ToString())
                {
                    <li><a href="/waypoints/@waypointPath.Item1[1].Symbol/navigate">Navigate To (@nextHopFuel/@currentShip.Fuel.Current) (@waypointPath.Item3)</a></li>
                }
                else
                {
                    <li>Can't Navigate - not in orbit (@Math.Ceiling(WaypointsService.CalculateDistance(currentWaypoint.X, currentWaypoint.Y, waypoint.X, waypoint.Y))/@currentShip.Fuel.Current)</li>
                }
            }
        }
    }
    @if (waypoint.Type == WaypointTypesEnum.JUMP_GATE.ToString()
        && waypoint.JumpGate is not null)
    {
        <li><b>Jump Gate:</b> @string.Join(", ", waypoint.JumpGate.Connections)</li>
    }
    @if (waypoint.IsUnderConstruction
        && waypoint.Construction is not null)
    {
        <li><b>Construction Materials:</b></li>
        <ul>
            @foreach (var material in waypoint.Construction.Materials)
            {
                <li>@material.TradeSymbol (@material.Fulfilled/@material.Required)</li>
            }
        </ul>
    }
    @if (waypoint.Type == WaypointTypesEnum.ASTEROID.ToString() 
        || waypoint.Type == WaypointTypesEnum.ENGINEERED_ASTEROID.ToString())
    {
        if (currentShip is not null
            && currentShip.Registration.Role == ShipRegistrationRolesEnum.EXCAVATOR.ToString()
            && currentShip.Nav.Status == NavStatusEnum.IN_ORBIT.ToString())
        {
            <li><a href="/ships/extract">Extract</a></li>
        }
        if (currentShip is not null 
            && currentShip.Registration.Role == ShipRegistrationRolesEnum.SURVEYOR.ToString()
            && currentShip.Nav.Status == NavStatusEnum.IN_ORBIT.ToString())
        {
            <li><a href="/ships/survey">Survey</a></li>
        }
    }
    @if (waypoint.Marketplace is not null
        && waypoint.Traits?.Any(t => t.Symbol == WaypointTypesEnum.MARKETPLACE.ToString()) == true)
    {
        @* <li><a href="/marketplaces/@waypoint.Symbol">Marketplace</a></li> *@
        <li>@await Html.PartialAsync("/Views/Marketplaces/_Marketplace.cshtml", waypoint.Marketplace)</li>
    }
</ul>

@if (waypoint.Shipyard is not null)
{
    <div style="margin-left:10px; border-left-style: solid; border-left-width: 1px; padding-left: 10px;">
        @{
            await Html.RenderPartialAsync("~/Views/Shipyards/_Shipyard.cshtml", waypoint.Shipyard);
        }
    </div>
}

@* <div style="margin-left:10px; border-left-style: solid; border-left-width: 1px; padding-left: 10px;">
    using SpaceTraders.Services.Paths;
#line default
{
        await Html.RenderPartialAsync("~/Views/Orbitals/_Orbital.cshtml", orbital);
    }
</diusing System.Runtime.InteropServices;
#line default *@
