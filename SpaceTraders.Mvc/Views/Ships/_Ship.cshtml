@using SpaceTraders.Models
@using SpaceTraders.Models.Enums
@using SpaceTraders.Mvc.Services
@using SpaceTraders.Services.Shipyards
@model ShipViewModel

@{
    var currentShipSymbol = ViewBag.CurrentShipSymbol ?? string.Empty;
    var ship = await Model.ShipTask;
    var contract = await Model.ContractTask;
    var waypoint = await Model.WaypointTask;
}

<h6>Ship <a href="/ships/@ship.Symbol">@ship.Symbol</a></h6>
<ul>
    <li><b>Registration Name:</b> @ship.Registration.Name</li>
    <li><b>Registration Faction:</b> @ship.Registration.FactionSymbol</li>
    <li><b>Registration Role:</b> @ship.Registration.Role</li>
    <li><b>Nav System:</b> <a href="/systems/@ship.Nav.SystemSymbol">@ship.Nav.SystemSymbol</a></li>
    <li><b>Waypoint Symbol:</b> <a href="/waypoints/@ship.Nav.WaypointSymbol">@ship.Nav.WaypointSymbol</a></li>
    <li><b>Destination:</b> @ship.Nav.Route.Destination.Symbol</li>
    <li><b>Nav Status:</b> @ship.Nav.Status</li>
    <li><b>FlightMode:</b> <a href="/ships/@ship.Symbol/navtoggle">@ship.Nav.FlightMode</a></li>
    <li><b>Crew Capacity:</b> @ship.Crew.Capacity</li>
    <li><b>Crew Required:</b> @ship.Crew.Required</li>
    <li><b>Frame:</b> @ship.Frame.Symbol</li>
    <li><b>Reactor:</b> @ship.Reactor.Symbol</li>
    <li><b>Engine:</b> @ship.Engine.Symbol</li>
    <li><b>Modules:</b> @string.Join(",", ship.Modules.Select(m => m.Symbol))</li>
    <li><b>Mounts:</b> @string.Join(",", ship.Mounts.Select(m => m.Symbol))</li>
    <li><b>Cargo:</b> @ship.Cargo.Units/@ship.Cargo.Capacity</li>
    <ul>
        @foreach (var inventory in ship.Cargo.Inventory)
        {
            <li>@inventory.Symbol (@inventory.Units/@ship.Cargo.Capacity) <a href="/ships/@ship.Symbol/sell/@inventory.Symbol">Sell</a> <a href="/ships/@ship.Symbol/jettison/@inventory.Symbol">Jettison</a></li>
        }
    </ul>
    <li><b>Fuel:</b> @ship.Fuel.Current (@ship.Fuel.Capacity)</li>

    @{
        var shipCooldown = ShipsService.GetShipCooldown(ship);
    }
    @if (shipCooldown.HasValue && shipCooldown.Value.TotalSeconds > 0)
    {
        <li><b>Cooldown:</b> <span class="countdown" data-countdown="@((DateTime.UtcNow + shipCooldown.Value).ToString("o"))">@ViewHelperService.MinimalHumanReadableTimeSpan(shipCooldown.Value)</span></li>
    }
    else
    {
        <li><b>Cooldown:</b> Ready</li>
    }
    @if (currentShipSymbol != ship.Symbol)
    {
        <li><a href="/ships/@ship.Symbol/active">Set as Active</a></li>
    }
    @if (ship.Nav.Status == NavStatusEnum.DOCKED.ToString())
    {
        <li><a href="/ships/@ship.Symbol/orbit">Travel To Orbit</a></li>
    }
    @if (ship.Nav.Status == NavStatusEnum.IN_ORBIT.ToString())
    {
        <li><a href="/ships/@ship.Symbol/dock">Dock To Current Waypoint</a></li>
    }
    @if (ship.Nav.Status == NavStatusEnum.DOCKED.ToString()
        && ship.Fuel.Current < ship.Fuel.Capacity)
    {
        <li><a href="/ships/@ship.Symbol/fuel">Buy Fuel</a></li>
    }
    <li><a href="/systems/withinrange">Waypoints Within Range</a></li>
    @if (contract is null)
    {
        <li><a href="/contracts/@ship.Symbol/negotiate">Negotiate New Contract</a></li>
    }
    @if (waypoint.Traits.Any(t => t.Symbol == WaypointTraitsEnum.UNCHARTED.ToString()))
    {
        <li><a href="/ships/@ship.Symbol/chart">Chart</a></li>
    }
    <li><a href="/ships/@ship.Symbol/scanwaypoints">Scan Waypoints</a></li>
    <li><a href="/ships/@ship.Symbol/scansystems">Scan Systems</a></li>
</ul>
